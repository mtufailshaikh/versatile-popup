/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "./dist/";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 1);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */,
/* 1 */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
var selector_namespaceObject = {};
__webpack_require__.r(selector_namespaceObject);
__webpack_require__.d(selector_namespaceObject, "$", function() { return $; });
__webpack_require__.d(selector_namespaceObject, "find", function() { return selector_find; });
__webpack_require__.d(selector_namespaceObject, "matches", function() { return matches; });
__webpack_require__.d(selector_namespaceObject, "DOMtastic", function() { return DOMtastic; });
var array_namespaceObject = {};
__webpack_require__.r(array_namespaceObject);
__webpack_require__.d(array_namespaceObject, "every", function() { return every; });
__webpack_require__.d(array_namespaceObject, "filter", function() { return array_filter; });
__webpack_require__.d(array_namespaceObject, "forEach", function() { return array_forEach; });
__webpack_require__.d(array_namespaceObject, "each", function() { return array_each; });
__webpack_require__.d(array_namespaceObject, "indexOf", function() { return indexOf; });
__webpack_require__.d(array_namespaceObject, "map", function() { return map; });
__webpack_require__.d(array_namespaceObject, "pop", function() { return pop; });
__webpack_require__.d(array_namespaceObject, "push", function() { return push; });
__webpack_require__.d(array_namespaceObject, "reduce", function() { return reduce; });
__webpack_require__.d(array_namespaceObject, "reduceRight", function() { return reduceRight; });
__webpack_require__.d(array_namespaceObject, "reverse", function() { return array_reverse; });
__webpack_require__.d(array_namespaceObject, "shift", function() { return shift; });
__webpack_require__.d(array_namespaceObject, "some", function() { return some; });
__webpack_require__.d(array_namespaceObject, "unshift", function() { return unshift; });
var css_namespaceObject = {};
__webpack_require__.r(css_namespaceObject);
__webpack_require__.d(css_namespaceObject, "css", function() { return css_css; });
var dom_namespaceObject = {};
__webpack_require__.r(dom_namespaceObject);
__webpack_require__.d(dom_namespaceObject, "append", function() { return dom_append; });
__webpack_require__.d(dom_namespaceObject, "prepend", function() { return dom_prepend; });
__webpack_require__.d(dom_namespaceObject, "before", function() { return dom_before; });
__webpack_require__.d(dom_namespaceObject, "after", function() { return dom_after; });
__webpack_require__.d(dom_namespaceObject, "clone", function() { return dom_clone; });
__webpack_require__.d(dom_namespaceObject, "_clone", function() { return _clone; });
__webpack_require__.d(dom_namespaceObject, "_each", function() { return dom_each; });
var attr_namespaceObject = {};
__webpack_require__.r(attr_namespaceObject);
__webpack_require__.d(attr_namespaceObject, "attr", function() { return attr_attr; });
__webpack_require__.d(attr_namespaceObject, "removeAttr", function() { return attr_removeAttr; });
var class_namespaceObject = {};
__webpack_require__.r(class_namespaceObject);
__webpack_require__.d(class_namespaceObject, "addClass", function() { return class_addClass; });
__webpack_require__.d(class_namespaceObject, "removeClass", function() { return class_removeClass; });
__webpack_require__.d(class_namespaceObject, "toggleClass", function() { return class_toggleClass; });
__webpack_require__.d(class_namespaceObject, "hasClass", function() { return hasClass; });
var contains_namespaceObject = {};
__webpack_require__.r(contains_namespaceObject);
__webpack_require__.d(contains_namespaceObject, "contains", function() { return contains; });
var data_namespaceObject = {};
__webpack_require__.r(data_namespaceObject);
__webpack_require__.d(data_namespaceObject, "data", function() { return data_data; });
__webpack_require__.d(data_namespaceObject, "prop", function() { return data_prop; });
var extra_namespaceObject = {};
__webpack_require__.r(extra_namespaceObject);
__webpack_require__.d(extra_namespaceObject, "appendTo", function() { return extra_appendTo; });
__webpack_require__.d(extra_namespaceObject, "empty", function() { return extra_empty; });
__webpack_require__.d(extra_namespaceObject, "remove", function() { return extra_remove; });
__webpack_require__.d(extra_namespaceObject, "replaceWith", function() { return extra_replaceWith; });
__webpack_require__.d(extra_namespaceObject, "text", function() { return extra_text; });
__webpack_require__.d(extra_namespaceObject, "val", function() { return extra_val; });
var html_namespaceObject = {};
__webpack_require__.r(html_namespaceObject);
__webpack_require__.d(html_namespaceObject, "html", function() { return html_html; });
var closest_namespaceObject = {};
__webpack_require__.r(closest_namespaceObject);
__webpack_require__.d(closest_namespaceObject, "closest", function() { return closest_closest; });
var event_namespaceObject = {};
__webpack_require__.r(event_namespaceObject);
__webpack_require__.d(event_namespaceObject, "on", function() { return event_on; });
__webpack_require__.d(event_namespaceObject, "off", function() { return event_off; });
__webpack_require__.d(event_namespaceObject, "one", function() { return one; });
__webpack_require__.d(event_namespaceObject, "getHandlers", function() { return getHandlers; });
__webpack_require__.d(event_namespaceObject, "clearHandlers", function() { return clearHandlers; });
__webpack_require__.d(event_namespaceObject, "proxyHandler", function() { return proxyHandler; });
__webpack_require__.d(event_namespaceObject, "delegateHandler", function() { return event_delegateHandler; });
__webpack_require__.d(event_namespaceObject, "bind", function() { return bind; });
__webpack_require__.d(event_namespaceObject, "unbind", function() { return unbind; });
var trigger_namespaceObject = {};
__webpack_require__.r(trigger_namespaceObject);
__webpack_require__.d(trigger_namespaceObject, "trigger", function() { return trigger_trigger; });
__webpack_require__.d(trigger_namespaceObject, "triggerHandler", function() { return triggerHandler; });
var ready_namespaceObject = {};
__webpack_require__.r(ready_namespaceObject);
__webpack_require__.d(ready_namespaceObject, "ready", function() { return ready; });
var noconflict_namespaceObject = {};
__webpack_require__.r(noconflict_namespaceObject);
__webpack_require__.d(noconflict_namespaceObject, "noConflict", function() { return noconflict_noConflict; });
var selector_extra_namespaceObject = {};
__webpack_require__.r(selector_extra_namespaceObject);
__webpack_require__.d(selector_extra_namespaceObject, "children", function() { return extra_children; });
__webpack_require__.d(selector_extra_namespaceObject, "concat", function() { return extra_concat; });
__webpack_require__.d(selector_extra_namespaceObject, "contents", function() { return extra_contents; });
__webpack_require__.d(selector_extra_namespaceObject, "eq", function() { return eq; });
__webpack_require__.d(selector_extra_namespaceObject, "first", function() { return first; });
__webpack_require__.d(selector_extra_namespaceObject, "get", function() { return extra_get; });
__webpack_require__.d(selector_extra_namespaceObject, "parent", function() { return extra_parent; });
__webpack_require__.d(selector_extra_namespaceObject, "siblings", function() { return extra_siblings; });
__webpack_require__.d(selector_extra_namespaceObject, "slice", function() { return extra_slice; });
var type_namespaceObject = {};
__webpack_require__.r(type_namespaceObject);
__webpack_require__.d(type_namespaceObject, "isFunction", function() { return isFunction; });
__webpack_require__.d(type_namespaceObject, "isArray", function() { return isArray; });

// CONCATENATED MODULE: ./node_modules/domtastic/src/util.js
/*
 * @module Util
 */

/*
 * Reference to the window object
 * @private
 */

var win = typeof window !== 'undefined' ? window : {};

/**
 * Convert `NodeList` to `Array`.
 *
 * @param {NodeList|Array} collection
 * @return {Array}
 * @private
 */

var toArray = function toArray(collection) {
  var length = collection.length;
  var result = new Array(length);
  for (var i = 0; i < length; i++) {
    result[i] = collection[i];
  }
  return result;
};

/**
 * Faster alternative to [].forEach method
 *
 * @param {Node|NodeList|Array} collection
 * @param {Function} callback
 * @return {Node|NodeList|Array}
 * @private
 */

var each = function each(collection, callback, thisArg) {
  var length = collection.length;
  if (length !== undefined && collection.nodeType === undefined) {
    for (var i = 0; i < length; i++) {
      callback.call(thisArg, collection[i], i, collection);
    }
  } else {
    callback.call(thisArg, collection, 0, collection);
  }
  return collection;
};

/**
 * Assign enumerable properties from source object(s) to target object
 *
 * @method extend
 * @param {Object} target Object to extend
 * @param {Object} [source] Object to extend from
 * @return {Object} Extended object
 * @example
 *     $.extend({a: 1}, {b: 2}); // {a: 1, b: 2}
 * @example
 *     $.extend({a: 1}, {b: 2}, {a: 3}); // {a: 3, b: 2}
 */

var extend = function extend(target) {
  for (var _len = arguments.length, sources = Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
    sources[_key - 1] = arguments[_key];
  }

  sources.forEach(function (src) {
    for (var prop in src) {
      target[prop] = src[prop];
    }
  });
  return target;
};

/**
 * Return the collection without duplicates
 *
 * @param collection Collection to remove duplicates from
 * @return {Node|NodeList|Array}
 * @private
 */

var uniq = function uniq(collection) {
  return collection.filter(function (item, index) {
    return collection.indexOf(item) === index;
  });
};
// CONCATENATED MODULE: ./node_modules/domtastic/src/selector/index.js
/**
 * @module Selector
 */



var isPrototypeSet = false;

var reFragment = /^\s*<(\w+|!)[^>]*>/;
var reSingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/;
var reSimpleSelector = /^[.#]?[\w-]*$/;

/*
 * Versatile wrapper for `querySelectorAll`.
 *
 * @param {String|Node|NodeList|Array} selector Query selector, `Node`, `NodeList`, array of elements, or HTML fragment string.
 * @param {String|Node|NodeList} context=document The context for the selector to query elements.
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     var $items = $(.items');
 * @example
 *     var $element = $(domElement);
 * @example
 *     var $list = $(nodeList, document.body);
 * @example
 *     var $element = $('<p>evergreen</p>');
 */

var domtastic = function domtastic(selector) {
  var context = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : document;


  var collection = void 0;

  if (!selector) {

    collection = document.querySelectorAll(null);
  } else if (selector instanceof DOMtastic) {

    return selector;
  } else if (typeof selector !== 'string') {

    collection = selector.nodeType || selector === window ? [selector] : selector;
  } else if (reFragment.test(selector)) {

    collection = createFragment(selector);
  } else {

    context = typeof context === 'string' ? document.querySelector(context) : context.length ? context[0] : context;

    collection = querySelector(selector, context);
  }

  return wrap(collection);
};

var $ = domtastic;

/*
 * Find descendants matching the provided `selector` for each element in the collection.
 *
 * @param {String|Node|NodeList|Array} selector Query selector, `Node`, `NodeList`, array of elements, or HTML fragment string.
 * @return {Object} The wrapped collection
 * @example
 *     $('.selector').find('.deep').$('.deepest');
 */

var selector_find = function find(selector) {
  var nodes = [];
  each(this, function (node) {
    return each(querySelector(selector, node), function (child) {
      if (nodes.indexOf(child) === -1) {
        nodes.push(child);
      }
    });
  });
  return $(nodes);
};

/*
 * Returns `true` if the element would be selected by the specified selector string; otherwise, returns `false`.
 *
 * @param {Node} element Element to test
 * @param {String} selector Selector to match against element
 * @return {Boolean}
 *
 * @example
 *     $.matches(element, '.match');
 */

var matches = function () {
  var context = typeof Element !== 'undefined' ? Element.prototype : win;
  var _matches = context.matches || context.matchesSelector || context.mozMatchesSelector || context.msMatchesSelector || context.oMatchesSelector || context.webkitMatchesSelector;
  return function (element, selector) {
    return _matches.call(element, selector);
  };
}();

/*
 * Use the faster `getElementById`, `getElementsByClassName` or `getElementsByTagName` over `querySelectorAll` if possible.
 *
 * @private
 * @param {String} selector Query selector.
 * @param {Node} context The context for the selector to query elements.
 * @return {Object} NodeList, HTMLCollection, or Array of matching elements (depending on method used).
 */

var querySelector = function querySelector(selector, context) {

  var isSimpleSelector = reSimpleSelector.test(selector);

  if (isSimpleSelector) {
    if (selector[0] === '#') {
      var element = (context.getElementById ? context : document).getElementById(selector.slice(1));
      return element ? [element] : [];
    }
    if (selector[0] === '.') {
      return context.getElementsByClassName(selector.slice(1));
    }
    return context.getElementsByTagName(selector);
  }

  return context.querySelectorAll(selector);
};

/*
 * Create DOM fragment from an HTML string
 *
 * @private
 * @param {String} html String representing HTML.
 * @return {NodeList}
 */

var createFragment = function createFragment(html) {

  if (reSingleTag.test(html)) {
    return [document.createElement(RegExp.$1)];
  }

  var elements = [];
  var container = document.createElement('div');
  var children = container.childNodes;

  container.innerHTML = html;

  for (var i = 0, l = children.length; i < l; i++) {
    elements.push(children[i]);
  }

  return elements;
};

/*
 * Calling `$(selector)` returns a wrapped collection of elements.
 *
 * @private
 * @param {NodeList|Array} collection Element(s) to wrap.
 * @return Object) The wrapped collection
 */

var wrap = function wrap(collection) {

  if (!isPrototypeSet) {
    DOMtastic.prototype = $.fn;
    DOMtastic.prototype.constructor = DOMtastic;
    isPrototypeSet = true;
  }

  return new DOMtastic(collection);
};

/*
 * Constructor for the Object.prototype strategy
 *
 * @constructor
 * @private
 * @param {NodeList|Array} collection Element(s) to wrap.
 */

var DOMtastic = function DOMtastic(collection) {
  var i = 0;
  var length = collection.length;
  for (; i < length;) {
    this[i] = collection[i++];
  }
  this.length = length;
};
// CONCATENATED MODULE: ./node_modules/domtastic/src/array.js
/**
 * @module Array
 */




var ArrayProto = Array.prototype;

/**
 * Checks if the given callback returns a true(-ish) value for each element in the collection.
 *
 * @param {Function} callback Function to execute for each element, invoked with `element` as argument.
 * @param {Object} [thisArg] Value to use as `this` when executing `callback`.
 * @return {Boolean} Whether each element passed the callback check.
 * @example
 *     // Test whether every element in the collection has the "active" attribute
 *     $('.items').every(function(element) {
 *         return element.hasAttribute('active')
 *     });
 */

var every = ArrayProto.every;

/**
 * Filter the collection by selector or function, and return a new collection with the result.
 *
 * @param {String|Function} selector Selector or function to filter the collection.
 * @param {Object} [thisArg] Value to use as `this` when executing `callback`.
 * @return {Object} A new wrapped collection
 * @chainable
 * @example
 *     $('.items').filter('.active');
 * @example
 *     $('.items').filter(function(element) {
 *         return element.hasAttribute('active')
 *     });
 */

var array_filter = function filter(selector, thisArg) {
  var callback = typeof selector === 'function' ? selector : function (element) {
    return matches(element, selector);
  };
  return $(ArrayProto.filter.call(this, callback, thisArg));
};

/**
 * Execute a function for each element in the collection.
 *
 * @param {Function} callback Function to execute for each element, invoked with `element` as argument.
 * @param {Object} [thisArg] Value to use as `this` when executing `callback`.
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.items').forEach(function(element) {
 *         element.style.color = 'evergreen';
 *     );
 */

var array_forEach = function forEach(callback, thisArg) {
  return each(this, callback, thisArg);
};

var array_each = array_forEach;

/**
 * Returns the index of an element in the collection.
 *
 * @param {Node} element
 * @return {Number} The zero-based index, -1 if not found.
 * @example
 *     $('.items').indexOf(element); // 2
 */

var indexOf = ArrayProto.indexOf;

/**
 * Create a new collection by executing the callback for each element in the collection.
 *
 * @param {Function} callback Function to execute for each element, invoked with `element` as argument.
 * @param {Object} [thisArg] Value to use as `this` when executing `callback`.
 * @return {Array} Collection with the return value of the executed callback for each element.
 * @example
 *     // Create a new array with the attribute value of each element:
 *     $('.items').map(function(element) {
 *         return element.getAttribute('name')
 */

var map = ArrayProto.map;

/**
 * Removes the last element from the collection, and returns that element.
 *
 * @return {Object} The last element from the collection.
 * @example
 *     var lastElement = $('.items').pop();
 */

var pop = ArrayProto.pop;

/**
 * Adds one or more elements to the end of the collection, and returns the new length of the collection.
 *
 * @param {Object} element Element(s) to add to the collection
 * @return {Number} The new length of the collection
 * @example
 *     $('.items').push(element);
 */

var push = ArrayProto.push;

/**
 * Apply a function against each element in the collection, and this accumulator function has to reduce it
 * to a single value.
 *
 * @param {Function} callback Function to execute on each value in the array, taking four arguments (see example).
 * @param {Mixed} initialValue Object to use as the first argument to the first call of the callback.
 * @example
 *     // Calculate the combined height of elements:
 *     $('.items').reduce(function(previousValue, element, index, collection) {
 *         return previousValue + element.clientHeight;
 *     }, 0);
 */

var reduce = ArrayProto.reduce;

/**
 * Apply a function against each element in the collection (from right-to-left), and this accumulator function has
 * to reduce it to a single value.
 *
 * @param {Function} callback Function to execute on each value in the array, taking four arguments (see example).
 * @param {Mixed} initialValue Object to use as the first argument to the first call of the callback.
 * @example
 *     // Concatenate the text of elements in reversed order:
 *     $('.items').reduceRight(function(previousValue, element, index, collection) {
 *         return previousValue + element.textContent;
 *     }, '');
 */

var reduceRight = ArrayProto.reduceRight;

/**
 * Reverses an array in place. The first array element becomes the last and the last becomes the first.
 *
 * @return {Object} The wrapped collection, reversed
 * @chainable
 * @example
 *     $('.items').reverse();
 */

var array_reverse = function reverse() {
  return $(toArray(this).reverse());
};

/**
 * Removes the first element from the collection, and returns that element.
 *
 * @return {Object} The first element from the collection.
 * @example
 *     var firstElement = $('.items').shift();
 */

var shift = ArrayProto.shift;

/**
 * Checks if the given callback returns a true(-ish) value for any of the elements in the collection.
 *
 * @param {Function} callback Function to execute for each element, invoked with `element` as argument.
 * @return {Boolean} Whether any element passed the callback check.
 * @example
 *     $('.items').some(function(element) {
 *         return element.hasAttribute('active')
 *     }); // true/false
 */

var some = ArrayProto.some;

/**
 * Adds one or more elements to the beginning of the collection, and returns the new length of the collection.
 *
 * @param {Object} element Element(s) to add to the collection
 * @return {Number} The new length of the collection
 * @example
 *     $('.items').unshift(element);
 */

var unshift = ArrayProto.unshift;
// CONCATENATED MODULE: ./node_modules/domtastic/src/baseClass.js
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

/**
 * @module BaseClass
 */




/* harmony default export */ var baseClass = (function (api) {

  /**
   * Provide subclass for classes or components to extend from.
   * The opposite and successor of plugins (no need to extend `$.fn` anymore, complete control).
   *
   * @return {Class} The class to extend from, including all `$.fn` methods.
   * @example
   *     import { BaseClass } from  'domtastic';
   *
   *     class MyComponent extends BaseClass {
   *         doSomething() {
   *             return this.addClass('.foo');
   *         }
   *     }
   *
   *     let component = new MyComponent('body');
   *     component.doSomething();
   *
   * @example
   *     import $ from  'domtastic';
   *
   *     class MyComponent extends $.BaseClass {
   *         progress(value) {
   *             return this.attr('data-progress', value);
   *         }
   *     }
   *
   *     let component = new MyComponent(document.body);
   *     component.progress('ive').append('<p>enhancement</p>');
   */

  var BaseClass = function BaseClass() {
    _classCallCheck(this, BaseClass);

    DOMtastic.call(this, $.apply(undefined, arguments));
  };

  extend(BaseClass.prototype, api);
  return BaseClass;
});
// CONCATENATED MODULE: ./node_modules/domtastic/src/css.js
/**
 * @module CSS
 */



var isNumeric = function isNumeric(value) {
  return !isNaN(parseFloat(value)) && isFinite(value);
};

var camelize = function camelize(value) {
  return value.replace(/-([\da-z])/gi, function (matches, letter) {
    return letter.toUpperCase();
  });
};

var dasherize = function dasherize(value) {
  return value.replace(/([a-z\d])([A-Z])/g, '$1-$2').toLowerCase();
};

/**
 * Get the value of a style property for the first element, or set one or more style properties for each element in the collection.
 *
 * @param {String|Object} key The name of the style property to get or set. Or an object containing key-value pairs to set as style properties.
 * @param {String} [value] The value of the style property to set.
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.item').css('padding-left'); // get
 *     $('.item').css('color', '#f00'); // set
 *     $('.item').css({'border-width': '1px', display: 'inline-block'}); // set multiple
 */

var css_css = function css(key, value) {

  var styleProps = void 0,
      prop = void 0,
      val = void 0;

  if (typeof key === 'string') {
    key = camelize(key);

    if (typeof value === 'undefined') {
      var element = this.nodeType ? this : this[0];
      if (element) {
        val = element.style[key];
        return isNumeric(val) ? parseFloat(val) : val;
      }
      return undefined;
    }

    styleProps = {};
    styleProps[key] = value;
  } else {
    styleProps = key;
    for (prop in styleProps) {
      val = styleProps[prop];
      delete styleProps[prop];
      styleProps[camelize(prop)] = val;
    }
  }

  each(this, function (element) {
    for (prop in styleProps) {
      if (styleProps[prop] || styleProps[prop] === 0) {
        element.style[prop] = styleProps[prop];
      } else {
        element.style.removeProperty(dasherize(prop));
      }
    }
  });

  return this;
};
// CONCATENATED MODULE: ./node_modules/domtastic/src/dom/index.js
/**
 * @module DOM
 */




var dom_forEach = Array.prototype.forEach;

/**
 * Append element(s) to each element in the collection.
 *
 * @param {String|Node|NodeList|Object} element What to append to the element(s).
 * Clones elements as necessary.
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.item').append('<p>more</p>');
 */

var dom_append = function append(element) {
  if (this instanceof Node) {
    if (typeof element === 'string') {
      this.insertAdjacentHTML('beforeend', element);
    } else {
      if (element instanceof Node) {
        this.appendChild(element);
      } else {
        var elements = element instanceof NodeList ? toArray(element) : element;
        dom_forEach.call(elements, this.appendChild.bind(this));
      }
    }
  } else {
    dom_each(this, append, element);
  }
  return this;
};

/**
 * Place element(s) at the beginning of each element in the collection.
 *
 * @param {String|Node|NodeList|Object} element What to place at the beginning of the element(s).
 * Clones elements as necessary.
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.item').prepend('<span>start</span>');
 */

var dom_prepend = function prepend(element) {
  if (this instanceof Node) {
    if (typeof element === 'string') {
      this.insertAdjacentHTML('afterbegin', element);
    } else {
      if (element instanceof Node) {
        this.insertBefore(element, this.firstChild);
      } else {
        var elements = element instanceof NodeList ? toArray(element) : element;
        dom_forEach.call(elements.reverse(), prepend.bind(this));
      }
    }
  } else {
    dom_each(this, prepend, element);
  }
  return this;
};

/**
 * Place element(s) before each element in the collection.
 *
 * @param {String|Node|NodeList|Object} element What to place as sibling(s) before to the element(s).
 * Clones elements as necessary.
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.items').before('<p>prefix</p>');
 */

var dom_before = function before(element) {
  if (this instanceof Node) {
    if (typeof element === 'string') {
      this.insertAdjacentHTML('beforebegin', element);
    } else {
      if (element instanceof Node) {
        this.parentNode.insertBefore(element, this);
      } else {
        var elements = element instanceof NodeList ? toArray(element) : element;
        dom_forEach.call(elements, before.bind(this));
      }
    }
  } else {
    dom_each(this, before, element);
  }
  return this;
};

/**
 * Place element(s) after each element in the collection.
 *
 * @param {String|Node|NodeList|Object} element What to place as sibling(s) after to the element(s). Clones elements as necessary.
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.items').after('<span>suf</span><span>fix</span>');
 */

var dom_after = function after(element) {
  if (this instanceof Node) {
    if (typeof element === 'string') {
      this.insertAdjacentHTML('afterend', element);
    } else {
      if (element instanceof Node) {
        this.parentNode.insertBefore(element, this.nextSibling);
      } else {
        var elements = element instanceof NodeList ? toArray(element) : element;
        dom_forEach.call(elements.reverse(), after.bind(this));
      }
    }
  } else {
    dom_each(this, after, element);
  }
  return this;
};

/**
 * Clone a wrapped object.
 *
 * @return {Object} Wrapped collection of cloned nodes.
 * @example
 *     $(element).clone();
 */

var dom_clone = function clone() {
  return $(_clone(this));
};

/**
 * Clone an object
 *
 * @param {String|Node|NodeList|Array} element The element(s) to clone.
 * @return {String|Node|NodeList|Array} The cloned element(s)
 * @private
 */

var _clone = function _clone(element) {
  if (typeof element === 'string') {
    return element;
  } else if (element instanceof Node) {
    return element.cloneNode(true);
  } else if ('length' in element) {
    return [].map.call(element, function (el) {
      return el.cloneNode(true);
    });
  }
  return element;
};

/**
 * Specialized iteration, applying `fn` in reversed manner to a clone of each element, but the provided one.
 *
 * @param {NodeList|Array} collection
 * @param {Function} fn
 * @param {Node} element
 * @private
 */

var dom_each = function _each(collection, fn, element) {
  var l = collection.length;
  while (l--) {
    var elm = l === 0 ? element : _clone(element);
    fn.call(collection[l], elm);
  }
};
// CONCATENATED MODULE: ./node_modules/domtastic/src/dom/attr.js
var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * @module Attr
 */



/**
 * Get the value of an attribute for the first element, or set one or more attributes for each element in the collection.
 *
 * @param {String|Object} key The name of the attribute to get or set. Or an object containing key-value pairs to set as attributes.
 * @param {String} [value] The value of the attribute to set.
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.item').attr('attrName'); // get
 *     $('.item').attr('attrName', 'attrValue'); // set
 *     $('.item').attr({attr1: 'value1', 'attr-2': 'value2'}); // set multiple
 */

var attr_attr = function attr(key, value) {

  if (typeof key === 'string' && typeof value === 'undefined') {
    var element = this.nodeType ? this : this[0];
    return element ? element.getAttribute(key) : undefined;
  }

  return each(this, function (element) {
    if ((typeof key === 'undefined' ? 'undefined' : _typeof(key)) === 'object') {
      for (var _attr in key) {
        element.setAttribute(_attr, key[_attr]);
      }
    } else {
      element.setAttribute(key, value);
    }
  });
};

/**
 * Remove attribute from each element in the collection.
 *
 * @param {String} key Attribute name
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.items').removeAttr('attrName');
 */

var attr_removeAttr = function removeAttr(key) {
  return each(this, function (element) {
    return element.removeAttribute(key);
  });
};
// CONCATENATED MODULE: ./node_modules/domtastic/src/dom/class.js
/**
 * @module Class
 */



/**
 * Add a class to the element(s)
 *
 * @param {String} value Space-separated class name(s) to add to the element(s).
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.item').addClass('bar');
 *     $('.item').addClass('bar foo');
 */

var class_addClass = function addClass(value) {
  if (value && value.length) {
    each(value.split(' '), class_each.bind(this, 'add'));
  }
  return this;
};

/**
 * Remove a class from the element(s)
 *
 * @param {String} value Space-separated class name(s) to remove from the element(s).
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.items').removeClass('bar');
 *     $('.items').removeClass('bar foo');
 */

var class_removeClass = function removeClass(value) {
  if (value && value.length) {
    each(value.split(' '), class_each.bind(this, 'remove'));
  }
  return this;
};

/**
 * Toggle a class at the element(s)
 *
 * @param {String} value Space-separated class name(s) to toggle at the element(s).
 * @param {Boolean} [state] A Boolean value to determine whether the class should be added or removed.
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.item').toggleClass('bar');
 *     $('.item').toggleClass('bar foo');
 *     $('.item').toggleClass('bar', true);
 */

var class_toggleClass = function toggleClass(value, state) {
  if (value && value.length) {
    var action = typeof state === 'boolean' ? state ? 'add' : 'remove' : 'toggle';
    each(value.split(' '), class_each.bind(this, action));
  }
  return this;
};

/**
 * Check if the element(s) have a class.
 *
 * @param {String} value Check if the DOM element contains the class name. When applied to multiple elements,
 * returns `true` if _any_ of them contains the class name.
 * @return {Boolean} Whether the element's class attribute contains the class name.
 * @example
 *     $('.item').hasClass('bar');
 */

var hasClass = function hasClass(value) {
  return (this.nodeType ? [this] : this).some(function (element) {
    return element.classList.contains(value);
  });
};

/**
 * Specialized iteration, applying `fn` of the classList API to each element.
 *
 * @param {String} fnName
 * @param {String} className
 * @private
 */

var class_each = function _each(fnName, className) {
  return each(this, function (element) {
    return element.classList[fnName](className);
  });
};
// CONCATENATED MODULE: ./node_modules/domtastic/src/dom/contains.js
/**
 * @module contains
 */

/**
 * Test whether an element contains another element in the DOM.
 *
 * @param {Element} container The element that may contain the other element.
 * @param {Element} element The element that may be a descendant of the other element.
 * @return {Boolean} Whether the `container` element contains the `element`.
 * @example
 *     $.contains(parentElement, childElement); // true/false
 */

var contains = function contains(container, element) {
  if (!container || !element || container === element) {
    return false;
  } else if (container.contains) {
    return container.contains(element);
  } else if (container.compareDocumentPosition) {
    return !(container.compareDocumentPosition(element) & Node.DOCUMENT_POSITION_DISCONNECTED);
  }
  return false;
};
// CONCATENATED MODULE: ./node_modules/domtastic/src/dom/data.js
/**
 * @module Data
 */



var isSupportsDataSet = typeof document !== 'undefined' && 'dataset' in document.documentElement;
var DATAKEYPROP = isSupportsDataSet ? 'dataset' : '__DOMTASTIC_DATA__';

var data_camelize = function camelize(str) {
  return str.replace(/-+(.)?/g, function (match, char) {
    return char ? char.toUpperCase() : '';
  });
};

/**
 * Get data from first element, or set data for each element in the collection.
 *
 * @param {String} key The key for the data to get or set.
 * @param {String} [value] The data to set.
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.item').data('attrName'); // get
 *     $('.item').data('attrName', {any: 'data'}); // set
 */

var data_data = function data(key, value) {

  if (typeof key === 'string' && typeof value === 'undefined') {
    var element = this.nodeType ? this : this[0];
    return element && DATAKEYPROP in element ? element[DATAKEYPROP][data_camelize(key)] : undefined;
  }

  return each(this, function (element) {
    if (!isSupportsDataSet) {
      element[DATAKEYPROP] = element[DATAKEYPROP] || {};
    }

    element[DATAKEYPROP][data_camelize(key)] = value;
  });
};

/**
 * Get property from first element, or set property on each element in the collection.
 *
 * @param {String} key The name of the property to get or set.
 * @param {String} [value] The value of the property to set.
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.item').prop('attrName'); // get
 *     $('.item').prop('attrName', 'attrValue'); // set
 */

var data_prop = function prop(key, value) {

  if (typeof key === 'string' && typeof value === 'undefined') {
    var element = this.nodeType ? this : this[0];
    return element && element ? element[key] : undefined;
  }

  return each(this, function (element) {
    return element[key] = value;
  });
};
// CONCATENATED MODULE: ./node_modules/domtastic/src/dom/extra.js
/**
 * @module DOM (extra)
 */





/**
 * Append each element in the collection to the specified element(s).
 *
 * @param {Node|NodeList|Object} element What to append the element(s) to. Clones elements as necessary.
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.item').appendTo(container);
 */

var extra_appendTo = function appendTo(element) {
  var context = typeof element === 'string' ? $(element) : element;
  dom_append.call(context, this);
  return this;
};

/*
 * Empty each element in the collection.
 *
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.item').empty();
 */

var extra_empty = function empty() {
  return each(this, function (element) {
    return element.innerHTML = '';
  });
};

/**
 * Remove the collection from the DOM.
 *
 * @return {Array} Array containing the removed elements
 * @example
 *     $('.item').remove();
 */

var extra_remove = function remove() {
  return each(this, function (element) {
    if (element.parentNode) {
      element.parentNode.removeChild(element);
    }
  });
};

/**
 * Replace each element in the collection with the provided new content, and return the array of elements that were replaced.
 *
 * @return {Array} Array containing the replaced elements
 */

var extra_replaceWith = function replaceWith() {
  return dom_before.apply(this, arguments).remove();
};

/**
 * Get the `textContent` from the first, or set the `textContent` of each element in the collection.
 *
 * @param {String} [value]
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.item').text('New content');
 */

var extra_text = function text(value) {

  if (value === undefined) {
    return this[0].textContent;
  }

  return each(this, function (element) {
    return element.textContent = '' + value;
  });
};

/**
 * Get the `value` from the first, or set the `value` of each element in the collection.
 *
 * @param {String} [value]
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('input.firstName').val('New value');
 */

var extra_val = function val(value) {

  if (value === undefined) {
    return this.length > 0 ? this[0].value : undefined;
  }

  return each(this, function (element) {
    return element.value = value;
  });
};
// CONCATENATED MODULE: ./node_modules/domtastic/src/dom/html.js
/**
 * @module HTML
 */



/*
 * Get the HTML contents of the first element, or set the HTML contents for each element in the collection.
 *
 * @param {String} [fragment] HTML fragment to set for the element. If this argument is omitted, the HTML contents are returned.
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.item').html();
 *     $('.item').html('<span>more</span>');
 */

var html_html = function html(fragment) {

  if (fragment === undefined) {
    var element = this.nodeType ? this : this[0];
    return element ? element.innerHTML : undefined;
  }

  return each(this, function (element) {
    return element.innerHTML = fragment;
  });
};
// CONCATENATED MODULE: ./node_modules/domtastic/src/selector/closest.js
/**
 * @module closest
 */




/**
 * Return the closest element matching the selector (starting by itself) for each element in the collection.
 *
 * @param {String} selector Filter
 * @param {Object} [context] If provided, matching elements must be a descendant of this element
 * @return {Object} New wrapped collection (containing zero or one element)
 * @chainable
 * @example
 *     $('.selector').closest('.container');
 */

var closest_closest = function () {

  var closest = function closest(selector, context) {
    var nodes = [];
    each(this, function (node) {
      while (node && node !== context) {
        if (matches(node, selector)) {
          nodes.push(node);
          break;
        }
        node = node.parentElement;
      }
    });
    return $(uniq(nodes));
  };

  return typeof Element === 'undefined' || !Element.prototype.closest ? closest : function (selector, context) {
    if (!context) {
      var nodes = [];
      each(this, function (node) {
        var n = node.closest(selector);
        if (n) {
          nodes.push(n);
        }
      });
      return $(uniq(nodes));
    } else {
      return closest.call(this, selector, context);
    }
  };
}();
// CONCATENATED MODULE: ./node_modules/domtastic/src/event/index.js
/**
 * @module Events
 */




/**
 * Shorthand for `addEventListener`. Supports event delegation if a filter (`selector`) is provided.
 *
 * @param {String} eventNames List of space-separated event types to be added to the element(s)
 * @param {String} [selector] Selector to filter descendants that delegate the event to this element.
 * @param {Function} handler Event handler
 * @param {Boolean} useCapture=false
 * @param {Boolean} once=false
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.item').on('click', callback);
 *     $('.container').on('click focus', '.item', handler);
 */

var event_on = function on(eventNames, selector, handler, useCapture, once) {
  var _this = this;

  if (typeof selector === 'function') {
    handler = selector;
    selector = null;
  }

  var parts = void 0,
      namespace = void 0,
      eventListener = void 0;

  eventNames.split(' ').forEach(function (eventName) {

    parts = eventName.split('.');
    eventName = parts[0] || null;
    namespace = parts[1] || null;

    eventListener = proxyHandler(handler);

    each(_this, function (element) {

      if (selector) {
        eventListener = event_delegateHandler.bind(element, selector, eventListener);
      }

      if (once) {
        var listener = eventListener;
        eventListener = function eventListener(event) {
          event_off.call(element, eventNames, selector, handler, useCapture);
          listener.call(element, event);
        };
      }

      element.addEventListener(eventName, eventListener, useCapture || false);

      getHandlers(element).push({
        eventName: eventName,
        handler: handler,
        eventListener: eventListener,
        selector: selector,
        namespace: namespace
      });
    });
  }, this);

  return this;
};

/**
 * Shorthand for `removeEventListener`.
 *
 * @param {String} eventNames List of space-separated event types to be removed from the element(s)
 * @param {String} [selector] Selector to filter descendants that undelegate the event to this element.
 * @param {Function} handler Event handler
 * @param {Boolean} useCapture=false
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.item').off('click', callback);
 *     $('#my-element').off('myEvent myOtherEvent');
 *     $('.item').off();
 */

var event_off = function off() {
  var eventNames = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
  var selector = arguments[1];

  var _this2 = this;

  var handler = arguments[2];
  var useCapture = arguments[3];


  if (typeof selector === 'function') {
    handler = selector;
    selector = null;
  }

  var parts = void 0,
      namespace = void 0,
      handlers = void 0;

  eventNames.split(' ').forEach(function (eventName) {

    parts = eventName.split('.');
    eventName = parts[0] || null;
    namespace = parts[1] || null;

    return each(_this2, function (element) {

      handlers = getHandlers(element);

      each(handlers.filter(function (item) {
        return (!eventName || item.eventName === eventName) && (!namespace || item.namespace === namespace) && (!handler || item.handler === handler) && (!selector || item.selector === selector);
      }), function (item) {
        element.removeEventListener(item.eventName, item.eventListener, useCapture || false);
        handlers.splice(handlers.indexOf(item), 1);
      });

      if (!eventName && !namespace && !selector && !handler) {
        clearHandlers(element);
      } else if (handlers.length === 0) {
        clearHandlers(element);
      }
    });
  }, this);

  return this;
};

/**
 * Add event listener and execute the handler at most once per element.
 *
 * @param eventNames
 * @param selector
 * @param handler
 * @param useCapture
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.item').one('click', callback);
 */

var one = function one(eventNames, selector, handler, useCapture) {
  return event_on.call(this, eventNames, selector, handler, useCapture, 1);
};

/**
 * Get event handlers from an element
 *
 * @private
 * @param {Node} element
 * @return {Array}
 */

var eventKeyProp = '__domtastic_event__';
var id = 1;
var event_handlers = {};
var unusedKeys = [];

var getHandlers = function getHandlers(element) {
  if (!element[eventKeyProp]) {
    element[eventKeyProp] = unusedKeys.length === 0 ? ++id : unusedKeys.pop();
  }
  var key = element[eventKeyProp];
  return event_handlers[key] || (event_handlers[key] = []);
};

/**
 * Clear event handlers for an element
 *
 * @private
 * @param {Node} element
 */

var clearHandlers = function clearHandlers(element) {
  var key = element[eventKeyProp];
  if (event_handlers[key]) {
    event_handlers[key] = null;
    element[eventKeyProp] = null;
    unusedKeys.push(key);
  }
};

/**
 * Function to create a handler that augments the event object with some extra methods,
 * and executes the callback with the event and the event data (i.e. `event.detail`).
 *
 * @private
 * @param handler Callback to execute as `handler(event, data)`
 * @return {Function}
 */

var proxyHandler = function proxyHandler(handler) {
  return function (event) {
    return handler.call(this, augmentEvent(event));
  };
};

var eventMethods = {
  preventDefault: 'isDefaultPrevented',
  stopImmediatePropagation: 'isImmediatePropagationStopped',
  stopPropagation: 'isPropagationStopped'
};
var returnTrue = function returnTrue() {
  return true;
};
var returnFalse = function returnFalse() {
  return false;
};

/**
 * Attempt to augment events and implement something closer to DOM Level 3 Events.
 *
 * @private
 * @param {Object} event
 * @return {Function}
 */

var augmentEvent = function augmentEvent(event) {
  if (!event.isDefaultPrevented || event.stopImmediatePropagation || event.stopPropagation) {
    for (var methodName in eventMethods) {
      (function (methodName, testMethodName, originalMethod) {
        event[methodName] = function () {
          this[testMethodName] = returnTrue;
          return originalMethod && originalMethod.apply(this, arguments);
        };
        event[testMethodName] = returnFalse;
      })(methodName, eventMethods[methodName], event[methodName]);
    }
    if (event._preventDefault) {
      event.preventDefault();
    }
  }
  return event;
};

/**
 * Function to test whether delegated events match the provided `selector` (filter),
 * if the event propagation was stopped, and then actually call the provided event handler.
 * Use `this` instead of `event.currentTarget` on the event object.
 *
 * @private
 * @param {String} selector Selector to filter descendants that undelegate the event to this element.
 * @param {Function} handler Event handler
 * @param {Event} event
 */

var event_delegateHandler = function delegateHandler(selector, handler, event) {
  var eventTarget = event._target || event.target;
  var currentTarget = closest_closest.call([eventTarget], selector, this)[0];
  if (currentTarget && currentTarget !== this) {
    if (currentTarget === eventTarget || !(event.isPropagationStopped && event.isPropagationStopped())) {
      handler.call(currentTarget, event);
    }
  }
};

var bind = event_on;
var unbind = event_off;
// CONCATENATED MODULE: ./node_modules/domtastic/src/event/trigger.js
/**
 * @module trigger
 */




var reMouseEvent = /^(mouse(down|up|over|out|enter|leave|move)|contextmenu|(dbl)?click)$/;
var reKeyEvent = /^key(down|press|up)$/;

/**
 * Trigger event at element(s)
 *
 * @param {String} type Type of the event
 * @param {Object} data Data to be sent with the event (`params.detail` will be set to this).
 * @param {Object} [params] Event parameters (optional)
 * @param {Boolean} params.bubbles=true Does the event bubble up through the DOM or not.
 * @param {Boolean} params.cancelable=true Is the event cancelable or not.
 * @param {Mixed} params.detail=undefined Additional information about the event.
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $('.item').trigger('anyEventType');
 */

var trigger_trigger = function trigger(type, data) {
  var _ref = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {},
      _ref$bubbles = _ref.bubbles,
      bubbles = _ref$bubbles === undefined ? true : _ref$bubbles,
      _ref$cancelable = _ref.cancelable,
      cancelable = _ref$cancelable === undefined ? true : _ref$cancelable,
      _ref$preventDefault = _ref.preventDefault,
      preventDefault = _ref$preventDefault === undefined ? false : _ref$preventDefault;

  var EventConstructor = getEventConstructor(type);
  var event = new EventConstructor(type, {
    bubbles: bubbles,
    cancelable: cancelable,
    preventDefault: preventDefault,
    detail: data
  });

  event._preventDefault = preventDefault;

  return each(this, function (element) {
    if (!bubbles || isEventBubblingInDetachedTree || trigger_isAttachedToDocument(element)) {
      dispatchEvent(element, event);
    } else {
      triggerForPath(element, type, {
        bubbles: bubbles,
        cancelable: cancelable,
        preventDefault: preventDefault,
        detail: data
      });
    }
  });
};

var getEventConstructor = function getEventConstructor(type) {
  return isSupportsOtherEventConstructors ? reMouseEvent.test(type) ? MouseEvent : reKeyEvent.test(type) ? KeyboardEvent : CustomEvent : CustomEvent;
};

/**
 * Trigger event at first element in the collection. Similar to `trigger()`, except:
 *
 * - Event does not bubble
 * - Default event behavior is prevented
 * - Only triggers handler for first matching element
 *
 * @param {String} type Type of the event
 * @param {Object} data Data to be sent with the event
 * @example
 *     $('form').triggerHandler('submit');
 */

var triggerHandler = function triggerHandler(type, data) {
  if (this[0]) {
    trigger_trigger.call(this[0], type, data, {
      bubbles: false,
      preventDefault: true
    });
  }
};

/**
 * Check whether the element is attached to or detached from) the document
 *
 * @private
 * @param {Node} element Element to test
 * @return {Boolean}
 */

var trigger_isAttachedToDocument = function isAttachedToDocument(element) {
  if (element === window || element === document) {
    return true;
  }
  return contains(element.ownerDocument.documentElement, element);
};

/**
 * Dispatch the event at the element and its ancestors.
 * Required to support delegated events in browsers that don't bubble events in detached DOM trees.
 *
 * @private
 * @param {Node} element First element to dispatch the event at
 * @param {String} type Type of the event
 * @param {Object} [params] Event parameters (optional)
 * @param {Boolean} params.bubbles=true Does the event bubble up through the DOM or not.
 * Will be set to false (but shouldn't matter since events don't bubble anyway).
 * @param {Boolean} params.cancelable=true Is the event cancelable or not.
 * @param {Mixed} params.detail=undefined Additional information about the event.
 */

var triggerForPath = function triggerForPath(element, type) {
  var params = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

  params.bubbles = false;
  var event = new CustomEvent(type, params);
  event._target = element;
  do {
    dispatchEvent(element, event);
  } while (element = element.parentNode); // eslint-disable-line no-cond-assign
};

/**
 * Dispatch event to element, but call direct event methods instead if available
 * (e.g. "blur()", "submit()") and if the event is non-cancelable.
 *
 * @private
 * @param {Node} element Element to dispatch the event at
 * @param {Object} event Event to dispatch
 */

var directEventMethods = ['blur', 'focus', 'select', 'submit'];

var dispatchEvent = function dispatchEvent(element, event) {
  if (directEventMethods.indexOf(event.type) !== -1 && typeof element[event.type] === 'function' && !event._preventDefault && !event.cancelable) {
    element[event.type]();
  } else {
    element.dispatchEvent(event);
  }
};

/**
 * Polyfill for CustomEvent, borrowed from [MDN](https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent#Polyfill).
 * Needed to support IE (9, 10, 11) & PhantomJS
 */

(function () {
  var CustomEvent = function CustomEvent(event) {
    var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {
      bubbles: false,
      cancelable: false,
      detail: undefined
    };

    var customEvent = document.createEvent('CustomEvent');
    customEvent.initCustomEvent(event, params.bubbles, params.cancelable, params.detail);
    return customEvent;
  };

  CustomEvent.prototype = win.CustomEvent && win.CustomEvent.prototype;
  win.CustomEvent = CustomEvent;
})();

/*
 * Are events bubbling in detached DOM trees?
 * @private
 */

var isEventBubblingInDetachedTree = function () {
  var isBubbling = false;
  var doc = win.document;
  if (doc) {
    var parent = doc.createElement('div');
    var child = parent.cloneNode();
    parent.appendChild(child);
    parent.addEventListener('e', function () {
      isBubbling = true;
    });
    child.dispatchEvent(new CustomEvent('e', { bubbles: true }));
  }
  return isBubbling;
}();

var isSupportsOtherEventConstructors = function () {
  try {
    new MouseEvent('click');
  } catch (e) {
    return false;
  }
  return true;
}();
// CONCATENATED MODULE: ./node_modules/domtastic/src/event/ready.js
/**
 * @module Ready
 */

/**
 * Execute callback when `DOMContentLoaded` fires for `document`, or immediately if called afterwards.
 *
 * @param handler Callback to execute when initial DOM content is loaded.
 * @return {Object} The wrapped collection
 * @chainable
 * @example
 *     $(document).ready(callback);
 */

var ready = function ready(handler) {
  if (/complete|loaded|interactive/.test(document.readyState) && document.body) {
    handler();
  } else {
    document.addEventListener('DOMContentLoaded', handler, false);
  }
  return this;
};
// CONCATENATED MODULE: ./node_modules/domtastic/src/noconflict.js
/**
 * @module noConflict
 */



/*
 * Save the previous value of the global `$` variable, so that it can be restored later on.
 * @private
 */

var previousLib = win.$;

/**
 * In case another library sets the global `$` variable before DOMtastic does,
 * this method can be used to return the global `$` to that other library.
 *
 * @return {Object} Reference to DOMtastic.
 * @example
 *     var domtastic = $.noConflict();
 */

var noconflict_noConflict = function noConflict() {
  win.$ = previousLib;
  return this;
};
// CONCATENATED MODULE: ./node_modules/domtastic/src/selector/extra.js
/**
 * @module Selector (extra)
 */




/**
 * Return children of each element in the collection, optionally filtered by a selector.
 *
 * @param {String} [selector] Filter
 * @return {Object} New wrapped collection
 * @chainable
 * @example
 *     $('.selector').children();
 *     $('.selector').children('.filter');
 */

var extra_children = function children(selector) {
  var nodes = [];
  each(this, function (element) {
    if (element.children) {
      each(element.children, function (child) {
        if (!selector || selector && matches(child, selector)) {
          nodes.push(child);
        }
      });
    }
  });
  return $(nodes);
};

/**
 * Add the elements of a wrapped collection to another.
 *
 * @param {String|Node|NodeList|Array} selector Query selector, `Node`, `NodeList`, array of elements, or HTML fragment string.
 * @return {Object} The extended wrapped collection
 * @example
 *     $('.items').concat($('.more-items));
 *     $('.items').concat('.more-items);
 *     $('.items').concat('<div>more</div>');
 */

var extra_concat = function concat(selector) {
  var _this = this;

  each($(selector), function (element) {
    if ([].indexOf.call(_this, element) === -1) {
      [].push.call(_this, element);
    }
  });
  return this;
};

/**
 * Return child nodes of each element in the collection, including text and comment nodes.
 *
 * @return {Object} New wrapped collection
 * @example
 *     $('.selector').contents();
 */

var extra_contents = function contents() {
  var nodes = [];
  each(this, function (element) {
    return nodes.push.apply(nodes, toArray(element.childNodes));
  });
  return $(nodes);
};

/**
 * Return a collection containing only the one at the specified index.
 *
 * @param {Number} index
 * @return {Object} New wrapped collection
 * @chainable
 * @example
 *     $('.items').eq(1)
 *     // The second item; result is the same as doing $($('.items')[1]);
 */

var eq = function eq(index) {
  return extra_slice.call(this, index, index + 1);
};

/**
 * Return a collection containing only the first item.
 *
 * @return {Object} New wrapped collection
 * @chainable
 * @example
 *     $('.items').first()
 *     // The first item; result is the same as doing $($('.items')[0]);
 */

var first = function first() {
  return extra_slice.call(this, 0, 1);
};

/**
 * Return the DOM element at the specified index.
 *
 * @param {Number} index
 * @return {Node} Element at the specified index
 * @example
 *     $('.items').get(1)
 *     // The second element; result is the same as doing $('.items')[1];
 */

var extra_get = function get(index) {
  return this[index];
};

/**
 * Return the parent elements of each element in the collection, optionally filtered by a selector.
 *
 * @param {String} [selector] Filter
 * @return {Object} New wrapped collection
 * @chainable
 * @example
 *     $('.selector').parent();
 *     $('.selector').parent('.filter');
 */

var extra_parent = function parent(selector) {
  var nodes = [];
  each(this, function (element) {
    if (!selector || selector && matches(element.parentNode, selector)) {
      nodes.push(element.parentNode);
    }
  });
  return $(nodes);
};

/**
 * Return the sibling elements of each element in the collection, optionally filtered by a selector.
 *
 * @param {String} [selector] Filter
 * @return {Object} New wrapped collection
 * @chainable
 * @example
 *     $('.selector').siblings();
 *     $('.selector').siblings('.filter');
 */

var extra_siblings = function siblings(selector) {
  var nodes = [];
  each(this, function (element) {
    return each(element.parentNode.children, function (sibling) {
      if (sibling !== element && (!selector || selector && matches(sibling, selector))) {
        nodes.push(sibling);
      }
    });
  });
  return $(nodes);
};

/**
 * Create a new, sliced collection.
 *
 * @param {Number} start
 * @param {Number} end
 * @return {Object} New wrapped collection
 * @example
 *     $('.items').slice(1, 3)
 *     // New wrapped collection containing the second, third, and fourth element.
 */

var extra_slice = function slice(start, end) {
  // eslint-disable-line no-unused-vars
  return $([].slice.apply(this, arguments));
};
// CONCATENATED MODULE: ./node_modules/domtastic/src/type.js
/**
 * @module Type
 */

/*
 * Determine if the argument passed is a Javascript function object.
 *
 * @param {Object} [obj] Object to test whether or not it is a function.
 * @return {boolean}
 * @example
 *     $.isFunction(function(){}); // true
 * @example
 *     $.isFunction({}); // false
 */

var isFunction = function isFunction(obj) {
  return typeof obj === 'function';
};

/*
 * Determine whether the argument is an array.
 *
 * @param {Object} [obj] Object to test whether or not it is an array.
 * @return {boolean}
 * @example
 *     $.isArray([]); // true
 * @example
 *     $.isArray({}); // false
 */

var isArray = Array.isArray;
// CONCATENATED MODULE: ./node_modules/domtastic/src/index.js
/**
 * @module API
 */



var src_api = {};
var src_$ = {};

// Import modules to build up the API




















if (typeof selector_namespaceObject !== 'undefined') {
  src_$ = $;
  src_$.matches = matches;
  src_api.find = selector_find;
}

extend(src_$, contains_namespaceObject, noconflict_namespaceObject, type_namespaceObject);
extend(src_api, array_namespaceObject, css_namespaceObject, attr_namespaceObject, dom_namespaceObject, class_namespaceObject, data_namespaceObject, extra_namespaceObject, html_namespaceObject, event_namespaceObject, trigger_namespaceObject, ready_namespaceObject, closest_namespaceObject, selector_extra_namespaceObject);

src_$.fn = src_api;

// Version

src_$.version = '__VERSION__';

// Util

src_$.extend = extend;

// Provide base class to extend from

if (typeof baseClass !== 'undefined') {
  src_$.BaseClass = baseClass(src_$.fn);
}

// Export interface

/* harmony default export */ var src = (src_$);
// CONCATENATED MODULE: ./src/cookies.js
var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function cookies_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

var Cookies = function () {
  function Cookies() {
    cookies_classCallCheck(this, Cookies);
  }

  _createClass(Cookies, [{
    key: 'create',
    value: function create(name, value) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      var str = Cookies.encode(name) + '=' + Cookies.encode(value);

      if (value == null) {
        options.maxage = -1;
      }

      if (options.maxage) {
        var date = new Date();
        date.setTime(date.getTime() + options.maxage);
        options.expires = date.toUTCString();
        //options.expires = new Date((new Date()).getTime() + options.maxage)
      }

      if (options.path) {
        str += '; path=' + options.path;
      }
      if (options.domain) {
        str += '; domain=' + options.domain;
      }
      if (options.expires) {
        str += '; expires=' + options.expires;
      }
      if (options.secure) {
        str += '; secure';
      }

      document.cookie = str;
    }
  }, {
    key: 'get',
    value: function get(name) {
      var cookies = Cookies.parse(document.cookie);
      if (name) {
        return cookies[name] || null;
      } else {
        return cookies;
      }
    }
  }], [{
    key: 'write',
    value: function write(name, value) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      var str = this.encode(name) + '=' + this.encode(value);

      if (value == null) {
        options.maxage = -1;
      }

      if (options.maxage) {
        var date = new Date();
        date.setTime(date.getTime() + options.maxage);
        options.expires = date.toUTCString();
        //options.expires = new Date((new Date()).getTime() + options.maxage)
      }

      if (options.path) {
        str += '; path=' + options.path;
      }
      if (options.domain) {
        str += '; domain=' + options.domain;
      }
      if (options.expires) {
        str += '; expires=' + options.expires;
      }
      if (options.secure) {
        str += '; secure';
      }

      document.cookie = str;
    }
  }, {
    key: 'read',
    value: function read(name) {
      var cookies = this.parse(document.cookie);
      if (name) {
        return cookies[name] || null;
      } else {
        return cookies;
      }
    }
  }, {
    key: 'delete',
    value: function _delete(name) {
      if (name) {
        this.write(name, null);
      } else {
        var cookies = this.read();
        for (var key in cookies) {
          if (cookies.hasOwnProperty(key)) {
            this.write(key, null);
          }
        }
      }
    }
  }, {
    key: 'parse',
    value: function parse(str) {
      var obj = {},
          pairs = str.split(/ *; */);

      if (!pairs[0]) {
        return obj;
      }

      var _iteratorNormalCompletion = true;
      var _didIteratorError = false;
      var _iteratorError = undefined;

      try {
        for (var _iterator = pairs[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
          var pair = _step.value;

          pair = pair.split('=');
          obj[this.decode(pair[0])] = this.decode(pair[1]);
        }
      } catch (err) {
        _didIteratorError = true;
        _iteratorError = err;
      } finally {
        try {
          if (!_iteratorNormalCompletion && _iterator.return) {
            _iterator.return();
          }
        } finally {
          if (_didIteratorError) {
            throw _iteratorError;
          }
        }
      }

      return obj;
    }
  }, {
    key: 'encode',
    value: function encode(value) {
      try {
        return encodeURIComponent(value);
      } catch (e) {
        return null;
      }
    }
  }, {
    key: 'decode',
    value: function decode(value) {
      try {
        return decodeURIComponent(value);
      } catch (e) {
        return null;
      }
    }
  }, {
    key: 'YearMaxAge',
    get: function get() {
      var MaxAge = 365 * 24 * 60 * 60 * 1000; //1 year;
      return MaxAge;
    }
  }]);

  return Cookies;
}();

/* harmony default export */ var cookies = (Cookies);
// CONCATENATED MODULE: ./src/versatile-popup.js


var versatile_popup_createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function versatile_popup_classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }




var versatile_popup_TTversatilePopup = function () {
  function TTversatilePopup() {
    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

    versatile_popup_classCallCheck(this, TTversatilePopup);

    this.header = options.header || false;
    this.body = options.body || '';
    this.footer = options.footer || false;
    this.showOnLoad = !!options.showOnLoad; //default to show the popup not arrow
    this.startDate = options.startDate || null; // starting date to show the widget
    this.endDate = options.endDate || null; // end date of the widget to hide after passing this date
    this.globalName = options.globalName || false; // popup unique name to target all popup individually if more than one popup
    this.customVisible = !!options.customVisible; // show hide popup on other pages based on current status
    this.inForm = options.inForm || '';
    this.$widget = "";
    //  this.init();
  }

  versatile_popup_createClass(TTversatilePopup, [{
    key: 'createElementFromString',
    value: function createElementFromString(htmlString) {
      var elem = document.createElement('div');
      elem.innerHTML = htmlString.trim();
      return elem.firstChild;
    }
  }, {
    key: 'init',
    value: function init() {
      var _this = this;

      this._widget = this.createElementFromString(this.htmlString);
      this.$widget = src(this._widget);
      if (typeof this.globalName == 'string') {
        if (this.startDate != null && this.endDate != null) {
          if (this.checkexpireDate(this.startDate, this.endDate)) {
            src('body').append(this.$widget);
          }
        } else {
          src('body').append(this.$widget);
        }
      } else {
        console.error('Please set the "globalName" for TT Versatile Popup.');
      }
      src(src(this.$widget).find('.ttw-versatile__close')).on('click', function () {
        _this.hide();
      });
      src(src(this.$widget).find('.ttw-versatile__open')).on('click', function () {
        _this.show();
      });
    }
  }, {
    key: 'checkexpireDate',
    value: function checkexpireDate() {
      var startDate = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;
      var endDate = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;

      if (startDate != null && endDate != null) {
        var start_date = new Date(startDate);
        var end_date = new Date(endDate);
        var today = new Date();
        if (today >= start_date && today <= end_date) {
          return true;
        } else {
          return false;
        }
      } else {
        return false;
      }
    }
  }, {
    key: 'show',
    value: function show() {
      var conversionCard = this.$widget.find('.ttw-versatile__card');
      var openBtn = this.$widget.find('.ttw-versatile__open');

      conversionCard.toggleClass('ttw-versatile__card--show');
      openBtn.toggleClass('ttw-versatile__open--show');
      if (this.customVisible) {
        cookies.write('tt-' + this.globalName, 'show', { 'path': '/' });
      }
    }
  }, {
    key: 'hide',
    value: function hide() {
      var conversionCard = this.$widget.find('.ttw-versatile__card');
      var openBtn = this.$widget.find('.ttw-versatile__open');

      conversionCard.toggleClass('ttw-versatile__card--show');
      openBtn.toggleClass('ttw-versatile__open--show');
      if (this.customVisible) {
        cookies.write('tt-' + this.globalName, 'hide', { 'path': '/' });
      }
    }
  }, {
    key: 'header',
    get: function get() {
      return this._header;
    },
    set: function set(value) {
      this._header = value;
    }
  }, {
    key: 'body',
    get: function get() {
      return this._body;
    },
    set: function set(value) {
      this._body = value;
    }
  }, {
    key: 'footer',
    get: function get() {
      return this._footer;
    },
    set: function set(value) {
      this._footer = value;
    }
  }, {
    key: 'htmlString',
    get: function get() {
      var showClass = '';
      var showArrow = '';
      var bgImage = "";
      if (this.showOnLoad) {
        if (cookies.read('tt-' + this.globalName)) {
          if (cookies.read('tt-' + this.globalName) == 'show') {
            showClass = ' ttw-versatile__card--show';
            showArrow = '';
          } else {
            showClass = '';
            showArrow = ' ttw-versatile__open--show';
          }
        } else {
          if (this.customVisible) {
            cookies.write('tt-' + this.globalName, 'show', { 'path': '/' });
            showClass = ' ttw-versatile__card--show';
          } else {
            showClass = ' ttw-versatile__card--show';
          }
        }
      } else {
        if (cookies.read('tt-' + this.globalName) == 'show') {
          showArrow = '';
          showClass = ' ttw-versatile__card--show';
        } else {
          showArrow = ' ttw-versatile__open--show';
          showClass = '';
        }
      }
      if (this.backgroundImage) {
        bgImage = ' style="background-image:url(\'' + this.backgroundImage + '\')"';
      }
      return '<div class="ttw-versatile ' + this.globalName + '">\n            ' + this.inForm + '\n              <div class="ttw-versatile__card' + showClass + '">\n            \t\t<span class="ttw-versatile__close">&times;</span>\n            \t\t' + (this.header ? '<div class="ttw-versatile__title">\n            \t\t\t' + this.header + '\n            \t\t</div>' : '') + '\n              \t<div class="ttw-versatile__body"' + bgImage + '>\n              \t  ' + this.body + '\n              \t</div>\n                ' + (this.footer ? '<div class="ttw-versatile__footer">\n                  ' + this.footer + '\n                </div> ' : '') + '\n              </div>\n              ' + (this.inForm ? '</form>' : '') + ' \n            \t<span class="ttw-versatile__open' + showArrow + '"><i>&rarr;</i></span>\n            </div>';
    }
  }]);

  return TTversatilePopup;
}();

/* harmony default export */ var versatile_popup = (versatile_popup_TTversatilePopup);
// CONCATENATED MODULE: ./src/main.js



var ttPlugin = window.ttPlugin || {};

ttPlugin.versatileCard = versatile_popup;
ttPlugin.Cookies = cookies;

window.ttPlugin = ttPlugin;

/***/ })
/******/ ]);
//# sourceMappingURL=tt-plugin.min.js.map